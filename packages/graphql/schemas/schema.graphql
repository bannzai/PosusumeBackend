scalar Date
scalar URL
scalar Latitude
scalar Longitude

type Query {
  me: Me
  spots(
    minLatitude: Latitude!
    minLongitude: Longitude!
    maxLatitude: Latitude!
    maxLongitude: Longitude!
  ): [Spot!]!
  spot(id: ID!): Spot!
}

type Mutation {
  spotAdd(input: SpotAddInput!): SpotAddPayload!
}

interface Node {
  id: ID!
}

type Spot implements Node {
  id: ID!
  title: String!
  imageURL: URL!
  createdDate: Date!
  deletedDate: Date
  archivedDate: Date
  authorID: ID!
  author: User!
  geoPoint: GeoPoint!
  resizedSpotImageURLs: ResizedSpotImageURLs!
}

"""
ResizedSpotImageURLs container of resized image URLs on Cloud Functions
All of these properties are optional because they are determined asynchronously.
Also, the newly added ResizedImageURL type will be null.
"""
type ResizedSpotImageURLs {
  # 120x160. For example, it is used on the Map
  thumbnail: URL
}

type GeoPoint {
  latitude: Latitude!
  longitude: Longitude!
}

type User implements Node {
  id: ID!
  name: String!
  displayName: String
  profileImageURL: URL
  resizedProfileImageURLs: ResizedUserProfileImageURLs!
}

"""
ResizedUserProfileImageURLs container of resized image URLs on Cloud Functions
All of these properties are optional because they are determined asynchronously.
Also, the newly added ResizedImageURL type will be null.
"""
type ResizedUserProfileImageURLs {
  # 120x120. For example, it is used on the Map
  thumbnail: URL
}

type Me implements Node {
  id: ID!
  user: User!
  spots: [Spot!]!
}

input SpotAddInput {
  # If no id is specified, it will be assigned automatically.
  id: ID
  title: String!
  imageURL: URL!
  latitude: Latitude!
  longitude: Longitude!
}

type SpotAddPayload {
  spot: Spot!
}
